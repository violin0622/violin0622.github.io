<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>编程 on Sonata for solo Violin</title>
    <link>//violinsonata.site/categories/%E7%BC%96%E7%A8%8B/</link>
    <description>Recent content in 编程 on Sonata for solo Violin</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 04 Sep 2020 15:05:10 +0800</lastBuildDate>
    
	<atom:link href="//violinsonata.site/categories/%E7%BC%96%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang使用gRPC指南</title>
      <link>//violinsonata.site/2020/use-grpc-in-golang/</link>
      <pubDate>Fri, 04 Sep 2020 15:05:10 +0800</pubDate>
      
      <guid>//violinsonata.site/2020/use-grpc-in-golang/</guid>
      <description>本文以一个简单的CURD服务为例演示了如果一步步使用grpc的接口. 使用protobuf 编写proto文件 proto文件是定义整个proto</description>
    </item>
    
    <item>
      <title>Golang使用私有仓库</title>
      <link>//violinsonata.site/2020/use-private-repo-in-golang/</link>
      <pubDate>Mon, 31 Aug 2020 14:51:20 +0800</pubDate>
      
      <guid>//violinsonata.site/2020/use-private-repo-in-golang/</guid>
      <description>本文基于go 1.13即以上进行演示。 将go代码推送到私有仓库之后， 如果想要在其他项目引用， 需要做以下设置。 设置go env # 设置代理， 多个用逗号分</description>
    </item>
    
    <item>
      <title>使用Golang创建守护进程</title>
      <link>//violinsonata.site/2020/create-daemon-process-in-golang/</link>
      <pubDate>Thu, 13 Aug 2020 15:07:00 +0800</pubDate>
      
      <guid>//violinsonata.site/2020/create-daemon-process-in-golang/</guid>
      <description>package main import ( &amp;quot;os&amp;quot; &amp;quot;fmt&amp;quot; &amp;quot;os/signal&amp;quot; &amp;quot;syscall&amp;quot; &amp;quot;time&amp;quot; &amp;quot;log&amp;quot; &amp;quot;os/exec&amp;quot; ) func init() { // 如果本进程的父进程不是init进程, 则 // 创建与本进程相同的子进程, 然后退出, 使 // 子进程被init进程接管, 从</description>
    </item>
    
    <item>
      <title>&lt;译&gt;并发模型</title>
      <link>//violinsonata.site/2019/concurrency-model/</link>
      <pubDate>Sat, 02 Mar 2019 19:23:36 +0800</pubDate>
      
      <guid>//violinsonata.site/2019/concurrency-model/</guid>
      <description>本文翻译自 http://tutorials.jenkov.com/java-concurrency/index.html 并发系统可以使用不同的并发模型来实现。并发模型阐述了系统中的多个线程怎样合作来完成给定的任务。不同的并发模型把任务按照不同的方式</description>
    </item>
    
    <item>
      <title>通过channel模拟信号</title>
      <link>//violinsonata.site/2019/broadcast-signals-using-channel/</link>
      <pubDate>Tue, 29 Jan 2019 12:52:36 +0800</pubDate>
      
      <guid>//violinsonata.site/2019/broadcast-signals-using-channel/</guid>
      <description>众所周知，在Golang中创建多个goroutine后，可以使用sync.WaitGroup来等待多个协程全部完成。 那么是否有一种方法，不使</description>
    </item>
    
    <item>
      <title>Python虚拟环境指南</title>
      <link>//violinsonata.site/2019/virtualenvwrapper/</link>
      <pubDate>Sun, 27 Jan 2019 23:39:34 +0800</pubDate>
      
      <guid>//violinsonata.site/2019/virtualenvwrapper/</guid>
      <description>&lt;h2 id=&#34;安装-virtualenv&#34;&gt;安装&lt;code&gt;virtualenv&lt;/code&gt;:&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$pip install virtualenv
$virtualenv --version
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;安装-virtualenvwrapper&#34;&gt;安装 &lt;code&gt;virtualenvwrapper&lt;/code&gt;:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;如果想要使用 virtualenvwrapper的话， 不必事先手动安装 virtualenv,  pip会自动解决该依赖。&lt;/li&gt;
&lt;li&gt;在windows环境下,应该安装其对应的windows版本 : &lt;code&gt;virtualenvwrapper-win&lt;/code&gt;。该版本仅能在 cmd 下工作， 如果在windows上使用
模拟Linux命令行的工具， 如 git bash , cmder 等， 则可能会造成无法正常工作。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>